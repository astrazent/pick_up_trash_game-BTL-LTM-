package server.utils;

import server.data.MatchHistory;
import server.data.UserProfile;
import server.data.UserProfileServer;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;


public class DatabaseConnector {

    private static final String DB_URL = "jdbc:mysql://localhost:55566/pick_up_trash?serverTimezone=Asia/Ho_Chi_Minh";
    private static final String USER = "root";
    private static final String PASS = "55566";

    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, USER, PASS);
    }

    /**
     * X√°c th·ª±c ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ th√¥ng tin profile.
     * @return DatabaseResponse ch·ª©a UserProfileServer n·∫øu th√†nh c√¥ng.
     */
    public static DatabaseResponse<UserProfileServer> validateUser(String username, String password) {
        // C·∫ßn l·∫•y t·∫•t c·∫£ th√¥ng tin user, kh√¥ng ch·ªâ password
        String sql = "SELECT id, username, email, high_score, password FROM users WHERE username = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String storedPassword = rs.getString("password");
                if (storedPassword.equals(password)) {
                    // M·∫≠t kh·∫©u ƒë√∫ng, t·∫°o ƒë·ªëi t∆∞·ª£ng UserProfileServer
                    int id = rs.getInt("id");
                    String user = rs.getString("username");
                    String email = rs.getString("email");
                    int score = rs.getInt("high_score"); // ‚úÖ S·ª≠a l·∫°i ƒë√∫ng t√™n c·ªôt

                    UserProfileServer userProfile = new UserProfileServer(id, user, email, score);
                    return DatabaseResponse.success(userProfile, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng.");
                }
            }
            // Kh√¥ng t√¨m th·∫•y user
            return DatabaseResponse.error("T√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i.");

        } catch (SQLException e) {
            e.printStackTrace();
            return DatabaseResponse.error("L·ªói c∆° s·ªü d·ªØ li·ªáu: " + e.getMessage());
        }
    }
    /**
     * L·∫•y ƒëi·ªÉm cao nh·∫•t c·ªßa m·ªôt ng∆∞·ªùi ch∆°i
     * @param username T√™n ng∆∞·ªùi ch∆°i c·∫ßn l·∫•y ƒëi·ªÉm.
     * @return DatabaseResponse ch·ª©a ƒëi·ªÉm cao nh·∫•t (Integer).
     */
    public static DatabaseResponse<Integer> getUserScore(String username) {
        String sql = """
        SELECT high_score
        FROM users
        WHERE username = ?
    """;

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                int score = rs.getInt("high_score");
                return DatabaseResponse.success(score, "L·∫•y ƒëi·ªÉm cao nh·∫•t th√†nh c√¥ng.");
            } else {
                return DatabaseResponse.error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i: " + username);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            return DatabaseResponse.error("L·ªói c∆° s·ªü d·ªØ li·ªáu khi l·∫•y ƒëi·ªÉm: " + e.getMessage());
        }
    }
    /**
     * C·∫≠p nh·∫≠t ƒëi·ªÉm c·ªßa ng∆∞·ªùi ch∆°i:
     * - N·∫øu ƒëi·ªÉm m·ªõi cao h∆°n high_score trong b·∫£ng users, th√¨ c·∫≠p nh·∫≠t high_score.
     * @param username T√™n ng∆∞·ªùi ch∆°i.
     * @param newScore ƒêi·ªÉm m·ªõi ƒë·∫°t ƒë∆∞·ª£c.
     * @return DatabaseResponse ch·ª©a th√¥ng b√°o th√†nh c√¥ng ho·∫∑c l·ªói.
     */
    public static DatabaseResponse<Void> updateUserScore(String username, int newScore) {
        String findUserSql = "SELECT id, high_score FROM users WHERE username = ?";
        String updateHighScoreSql = "UPDATE users SET high_score = ? WHERE id = ?";

        try (Connection conn = getConnection()) {
            conn.setAutoCommit(false); // B·∫Øt ƒë·∫ßu transaction

            int userId = -1;
            int currentHighScore = 0;

            // 1Ô∏è‚É£ L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
            try (PreparedStatement pstmt = conn.prepareStatement(findUserSql)) {
                pstmt.setString(1, username);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    userId = rs.getInt("id");
                    currentHighScore = rs.getInt("high_score");
                } else {
                    return DatabaseResponse.error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i: " + username);
                }
            }

            // 2Ô∏è‚É£ N·∫øu ƒëi·ªÉm m·ªõi cao h∆°n high_score ‚Üí c·∫≠p nh·∫≠t
            if (newScore > currentHighScore) {
                try (PreparedStatement pstmt = conn.prepareStatement(updateHighScoreSql)) {
                    pstmt.setInt(1, newScore);
                    pstmt.setInt(2, userId);
                    pstmt.executeUpdate();
                }
            }

            conn.commit();
            return DatabaseResponse.success("C·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng.");

        } catch (SQLException e) {
            e.printStackTrace();
            return DatabaseResponse.error("L·ªói c∆° s·ªü d·ªØ li·ªáu khi c·∫≠p nh·∫≠t ƒëi·ªÉm: " + e.getMessage());
        }
    }
    /**
     * L∆∞u ƒëi·ªÉm c·ªßa ng∆∞·ªùi ch∆°i.
     * @return DatabaseResponse ch·ª©a tr·∫°ng th√°i th√†nh c√¥ng/th·∫•t b·∫°i.
     */
    public static DatabaseResponse<Void> saveScore(String username, int score) {
        String sql = "INSERT INTO leaderboard (username, score) VALUES (?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            pstmt.setInt(2, score);
            int rowsAffected = pstmt.executeUpdate();

            if (rowsAffected > 0) {
                return DatabaseResponse.success("L∆∞u ƒëi·ªÉm th√†nh c√¥ng.");
            } else {
                return DatabaseResponse.error("Kh√¥ng th·ªÉ l∆∞u ƒëi·ªÉm.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            return DatabaseResponse.error("L·ªói c∆° s·ªü d·ªØ li·ªáu khi l∆∞u ƒëi·ªÉm: " + e.getMessage());
        }
    }
    /**
     * C·∫≠p nh·∫≠t ƒëi·ªÉm c·ªßa ng∆∞·ªùi ch∆°i sau khi tr·∫≠n ƒë·∫•u k·∫øt th√∫c.
     * - T√≠nh ƒëi·ªÉm m·ªõi d·ª±a tr√™n k·∫øt qu·∫£: th·∫Øng, thua, h√≤a.
     * - L∆∞u tr·∫≠n ƒë·∫•u v√†o b·∫£ng match_history.
     * - C·∫≠p nh·∫≠t high_score trong users n·∫øu ƒëi·ªÉm m·ªõi cao h∆°n.
     *
     * @param username T√™n ng∆∞·ªùi ch∆°i.
     * @param result K·∫øt qu·∫£ tr·∫≠n ƒë·∫•u: "win", "lose", "draw".
     * @return DatabaseResponse ch·ª©a th√¥ng b√°o th√†nh c√¥ng ho·∫∑c l·ªói.
     */

    /**
     * B·∫Øt ƒë·∫ßu m·ªôt tr·∫≠n ƒë·∫•u gi·ªØa hai ng∆∞·ªùi ch∆°i.
     * - T·∫°o b·∫£n ghi m·ªõi trong match_history v·ªõi start_date = NOW()
     * - end_date, score, result ƒë·ªÉ NULL cho ƒë·∫øn khi k·∫øt th√∫c.
     */
    public static DatabaseResponse<Integer> startMatch(String username, String opponentName) {
        System.out.println("=== [DEBUG] G·ªåI startMatch() ===");
        System.out.println("  ‚Üí username: " + username);
        System.out.println("  ‚Üí opponentName: " + opponentName);

        String findUserSql = "SELECT id FROM users WHERE username = ?";
        String insertHistorySql = "INSERT INTO match_history (user_id, opponent_id) VALUES (?, ?)";

        try (Connection conn = getConnection()) {
            conn.setAutoCommit(false);

            int userId = -1;
            int opponentId = -1;

            // üîπ L·∫•y user_id
            try (PreparedStatement pstmt = conn.prepareStatement(findUserSql)) {
                pstmt.setString(1, username);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) userId = rs.getInt("id");
                else return DatabaseResponse.error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i: " + username);
            }

            // üîπ L·∫•y opponent_id
            if (username.equals(opponentName)) {
                opponentId = userId;
            } else {
                try (PreparedStatement pstmt = conn.prepareStatement(findUserSql)) {
                    pstmt.setString(1, opponentName);
                    ResultSet rs = pstmt.executeQuery();
                    if (rs.next()) opponentId = rs.getInt("id");
                    else return DatabaseResponse.error("Kh√¥ng t√¨m th·∫•y ƒë·ªëi th·ªß: " + opponentName);
                }
            }

            // üîπ Th√™m b·∫£n ghi match_history v√† l·∫•y match_id
            int matchId = -1;
            try (PreparedStatement pstmt = conn.prepareStatement(insertHistorySql, Statement.RETURN_GENERATED_KEYS)) {
                pstmt.setInt(1, userId);
                pstmt.setInt(2, opponentId);
                pstmt.executeUpdate();

                ResultSet rs = pstmt.getGeneratedKeys();
                if (rs.next()) matchId = rs.getInt(1);
            }

            conn.commit();
            System.out.println("=== [DEBUG] MATCH_ID t·∫°o ra: " + matchId + " ===");

            return DatabaseResponse.success(matchId, "‚úÖ B·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u th√†nh c√¥ng ‚Äî match_id: " + matchId);

        } catch (SQLException e) {
            e.printStackTrace();
            return DatabaseResponse.error("‚ùå L·ªói khi b·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u: " + e.getMessage());
        }
    }





    /**
     * C·∫≠p nh·∫≠t ƒëi·ªÉm v√† l·ªãch s·ª≠ tr·∫≠n ƒë·∫•u khi tr·∫≠n k·∫øt th√∫c.
     * - C·∫≠p nh·∫≠t match_history (score, result, end_date)
     * - C·∫≠p nh·∫≠t high_score n·∫øu c·∫ßn
     */
    /**
     * C·∫≠p nh·∫≠t ƒëi·ªÉm v√† k·∫øt qu·∫£ cho 1 b·∫£n ghi match_history c·ª• th·ªÉ (d·ª±a v√†o match_id).
     */
    public static DatabaseResponse<Void> updateScoreAfterMatch(int matchId, String username, String result) {
        System.out.println("[DEBUG] updateScoreAfterMatch called ‚Üí matchId=" + matchId + ", username=" + username + ", result=" + result);

        String findUserSql = "SELECT id, high_score FROM users WHERE username = ?";
        String updateHistorySql = "UPDATE match_history SET score = ?, result = ?, end_date = NOW() WHERE id = ?";
        String updateHighScoreSql = "UPDATE users SET high_score = ? WHERE id = ?";

        try (Connection conn = getConnection()) {
            conn.setAutoCommit(false);

            // 1Ô∏è‚É£ L·∫•y user_id, current_score, high_score
            int userId;
            int currentScore;
            int currentHighScore;

            DatabaseResponse<Integer> scoreRes = getUserScore(username);
            if (!scoreRes.isSuccess()) {
                return DatabaseResponse.error("Kh√¥ng th·ªÉ l·∫•y ƒëi·ªÉm hi·ªán t·∫°i: " + scoreRes.getMessage());
            }
            currentScore = scoreRes.getData();

            try (PreparedStatement pstmt = conn.prepareStatement(findUserSql)) {
                pstmt.setString(1, username);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    userId = rs.getInt("id");
                    currentHighScore = rs.getInt("high_score");
                } else {
                    return DatabaseResponse.error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i: " + username);
                }
            }

            // 2Ô∏è‚É£ T√≠nh ƒëi·ªÉm m·ªõi
            int newScore;
            switch (result.toLowerCase()) {
                case "win":
                    newScore = currentScore + 10;
                    break;
                case "lose":
                    newScore = Math.max(0, currentScore - 5);
                    break;
                case "draw":
                    newScore = currentScore + 5;
                    break;
                default:
                    return DatabaseResponse.error("K·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá: " + result);
            }

            // 3Ô∏è‚É£ C·∫≠p nh·∫≠t match_history d·ª±a theo match_id
            try (PreparedStatement pstmt = conn.prepareStatement(updateHistorySql)) {
                pstmt.setInt(1, newScore);
                pstmt.setString(2, result.toLowerCase());
                pstmt.setInt(3, matchId);
                int updated = pstmt.executeUpdate();

                if (updated == 0) {
                    conn.rollback();
                    return DatabaseResponse.error("‚ùå Kh√¥ng t√¨m th·∫•y tr·∫≠n ƒë·∫•u c√≥ match_id: " + matchId);
                }
            }

            // 4Ô∏è‚É£ C·∫≠p nh·∫≠t high_score n·∫øu v∆∞·ª£t qua ƒëi·ªÉm cao nh·∫•t
            if (newScore > currentHighScore) {
                try (PreparedStatement pstmt = conn.prepareStatement(updateHighScoreSql)) {
                    pstmt.setInt(1, newScore);
                    pstmt.setInt(2, userId);
                    pstmt.executeUpdate();
                }
            }

            conn.commit();
            return DatabaseResponse.success("‚úÖ C·∫≠p nh·∫≠t k·∫øt qu·∫£ v√† ƒëi·ªÉm th√†nh c√¥ng.");

        } catch (SQLException e) {
            e.printStackTrace();
            return DatabaseResponse.error("‚ùå L·ªói c∆° s·ªü d·ªØ li·ªáu khi c·∫≠p nh·∫≠t tr·∫≠n ƒë·∫•u: " + e.getMessage());
        }
    }


    /**
     * L·∫•y danh s√°ch ƒëi·ªÉm cao t·ª´ users.high_score.
     * S·ª≠ d·ª•ng UserProfile thay cho LeaderboardEntry.
     * @return DatabaseResponse ch·ª©a danh s√°ch UserProfile.
     */
    public static DatabaseResponse<List<UserProfile>> getLeaderboard() {
        List<UserProfile> leaderboard = new ArrayList<>();
        String sql = "SELECT id, username, high_score FROM users ORDER BY high_score DESC LIMIT 10";

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                UserProfile user = new UserProfile();
                user.setUserId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
                user.setScore(rs.getInt("high_score"));

                leaderboard.add(user);
            }
            return DatabaseResponse.success(leaderboard, "L·∫•y b·∫£ng x·∫øp h·∫°ng th√†nh c√¥ng.");

        } catch (SQLException e) {
            e.printStackTrace();
            return DatabaseResponse.error("L·ªói c∆° s·ªü d·ªØ li·ªáu khi l·∫•y b·∫£ng x·∫øp h·∫°ng: " + e.getMessage());
        }
    }
    public static DatabaseResponse<List<MatchHistory>> getMatchHistory(String username) {
        List<MatchHistory> historyList = new ArrayList<>();

        String getUserIdSql = "SELECT id FROM users WHERE username = ?";
        String sql = "SELECT " +
                "  u.username AS my_name, " +
                "  o.username AS opponent_name, " +
                "  h.result, " +
                "  h.start_date, " +
                "  h.end_date " +
                "FROM match_history h " +
                "JOIN users u ON h.user_id = u.id " +
                "JOIN users o ON h.opponent_id = o.id " +
                "WHERE h.user_id = ? " +
                "AND h.end_date IS NOT NULL " +
                "AND h.result IS NOT NULL " +   // ‚úÖ th√™m kho·∫£ng tr·∫Øng ·ªü ƒë√¢y
                "ORDER BY h.start_date DESC";





        try (Connection conn = getConnection()) {
            int userId;

            // 1Ô∏è‚É£ L·∫•y user_id t·ª´ username
            try (PreparedStatement stmt = conn.prepareStatement(getUserIdSql)) {
                stmt.setString(1, username);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    userId = rs.getInt("id");
                } else {
                    return DatabaseResponse.failure("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: " + username);
                }
            }

            // 2Ô∏è‚É£ L·∫•y l·ªãch s·ª≠ ƒë·∫•u theo user_id
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, userId);
                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                    String myName = rs.getString("my_name");
                    String opponentName = rs.getString("opponent_name");
                    String result = rs.getString("result").toUpperCase();
                    String playedAt = rs.getString("start_date");
                    String endDate = rs.getString("end_date");

                    historyList.add(new MatchHistory(myName, opponentName, result, playedAt, endDate));
                }
            }

            return DatabaseResponse.success(historyList);

        } catch (Exception e) {
            e.printStackTrace();
            return DatabaseResponse.failure("L·ªói khi truy v·∫•n l·ªãch s·ª≠ ƒë·∫•u: " + e.getMessage());
        }
    }

    public static DatabaseResponse<List<UserProfile>> getAllUsers() {
        List<UserProfile> users = new ArrayList<>();
        String sql = "SELECT id, username, email, high_score FROM users";

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                UserProfile user = new UserProfile();
                user.setUserId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
                user.setEmail(rs.getString("email"));
                user.setScore(rs.getInt("high_score"));
                users.add(user);
            }

            return DatabaseResponse.success(users, "Lay DS nguoi choi thanh cong.");

        } catch (SQLException e) {
            e.printStackTrace();
            return DatabaseResponse.error("Loi CSDL khi l·∫•y DS ng∆∞·ªùi ch∆°i: " + e.getMessage());
        }
    }

}